# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import torch
import torch.nn as nn
import torch.nn.functional as F

import torch.optim as optim

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

#Create Net
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        #Kernel
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn. MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)

        #Output
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
        self.fc4 = nn.Linear(10, 1)
        
    def forward(self, x):
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv2(x)), 2)
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.fc4(x)
        return x

net = Net()

#Note that the input has to be 32 by 32 matrix in this net system
input = torch.randn(1, 1, 32, 32)
target = torch.randn(1)
target = target.view(1, -1)

#Create Loss Optimizer(SGD)
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
criterion = nn.MSELoss()


#Code under has to be implemented inside training loop

#Zero the grad buffers(Initializing)
optimizer.zero_grad()
output = net(input)
loss = criterion(output, target)
loss.backward()

#Update
optimizer.step()

#test
# print(net.conv1.bias.grad)


# Harvest data from excel file(종가, 거래량, 외국인, 기관, target: 등락률)
df = pd.read_excel("../input/stockdata-test/SKT.xlsx")

# print(df.at[2,'PRICE'])
# print(df.at[2,'FORN'])

dataMat = torch.zeros(1, 1, 32, 32)

for i in range(0,15):
    for j in range(0,15):
        dataMat(0, 0, i, j) = df.at[2, 'PRICE']

print(dataMat)
        
# print(a)
# print(a[0, 0, 0, 2])



# import os
# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
